# ----------------------------------
# Resources for BatchUpload servlet.
# ----------------------------------
individual=individual
encounter=encounter

batchUpload.error.MakeDir=Unable to create data folder on server
batchUpload.error.NoDataFileInd=No CSV data file for individuals specified
batchUpload.error.NoDataFileEnc=No CSV data file for encounters specified
batchUpload.error.NoDataFileMea=No CSV data file for measurements specified
batchUpload.error.NoDataFileMed=No CSV data file for media specified
batchUpload.error.NoDataFileSam=No CSV data file for samples specified
batchUpload.error.DataFileUploadErrInd=An error occurred uploading the CSV data file for individuals
batchUpload.error.DataFileUploadErrEnc=An error occurred uploading the CSV data file for encounters
batchUpload.error.DataFileUploadErrMea=An error occurred uploading the CSV data file for measurements
batchUpload.error.DataFileUploadErrMed=An error occurred uploading the CSV data file for media
batchUpload.error.DataFileUploadErrSam=An error occurred uploading the CSV data file for samples
batchUpload.error.DataTransferErr=An error occurred locating the batch data for processing

batchUpload.parseError.invalidDynPropSpec={0}: Invalid dynamic property specification: {1}

batchUpload.verifyError.repeatIndividualID=Individual {0} cannot be defined more than once
batchUpload.verifyError.existsIndividualID=Individual with ID {0} already exists in the database
batchUpload.verifyError.repeatEncounter=Encounter {0} cannot be defined more than once
batchUpload.verifyError.individualNoEncounter=Individual {0} has no encounters
batchUpload.verifyError.encounterUnknownIndividual=Encounter {0} refers to unknown Individual: {1}
batchUpload.verifyError.encounterInvalidSex=Encounter {0} specifies an invalid sex: {1}
batchUpload.verifyError.encounterInvalidTaxonomy=Encounter {0} specifies an invalid taxonomy: {1}
batchUpload.verifyError.encounterInvalidLifeStage=Encounter {0} specifies an invalid life stage: {1}
batchUpload.verifyError.encounterInvalidPatterningCode=Encounter {0} specifies an invalid patterning code: {1}
batchUpload.verifyError.encounterNoLocation=Encounter {0} must specify a valid location
batchUpload.verifyError.encounterInvalidLocation=Encounter {0} specifies an invalid location: {1}
batchUpload.verifyError.encounterInvalidLocationPermission=Insufficient permission to import data for location: {0}
batchUpload.verifyError.encounterInvalidSamplingProtocol=Encounter {0} specifies an invalid measurement protocol: {1}
batchUpload.verifyError.measurementNoEncounter=Measurements found which are not linked to encounters
batchUpload.verifyError.measurementInvalidEncounter=Measurement is linked to an unknown encounter: {0}
batchUpload.verifyError.measurementInvalidType=Measurement type is not supported: {0}
batchUpload.verifyError.measurementInvalidUnits=Measurement units are not supported: {0}
batchUpload.verifyError.measurementInvalidProtocol=Measurement protocol is not supported: {0}
batchUpload.verifyError.mediaNoEncounter=Media item is not linked to an encounter
batchUpload.verifyError.mediaInvalidEncounter=Media item is linked to an unknown encounter: {0}
batchUpload.verifyError.mediaDuplicateFile=Media filename has already been used: {0}
batchUpload.verifyError.mediaInvalidType=Media type is not supported: {0}
batchUpload.verifyError.mediaNoURL=Media items found with no URL specified
batchUpload.verifyError.mediaInvalidURL=Media item found with invalid URL: {0}
batchUpload.verifyError.mediaInvalidKeyword=Media keyword not supported: {0}
batchUpload.verifyError.sampleNoEncounter=Sample is not linked to an encounter: {0}
batchUpload.verifyError.sampleInvalidEncounter=Sample is linked to an unknown encounter: {0}
batchUpload.verifyError.sampleInvalidTissueType=Sample specifies an invalid tissue type: {0}

batchUpload.processError.plugin.loadFailed=Failed to load batch processing plugin: {0}
batchUpload.processError.plugin.preProcessError=Data pre-processing error in plugin (see server logs for details)
batchUpload.processError.plugin.processError=Data processing error in plugin (see server logs for details)
batchUpload.processError.mediaType=Invalid media type detected: {0}
batchUpload.processError.mediaDownload=Unable to download media item from: {0}
batchUpload.processError.mediaRename=Unable to store media item correctly: {0}
batchUpload.processError.mediaSize=Media file too large (>{1}MB): {0}
batchUpload.processError.persistIndividual=Individual {0} could not be stored in the database; batch upload aborted.
batchUpload.processError.persistEncounter=Encounter {0} could not be stored in the database; batch upload aborted.
batchUpload.processError.assignEncounter=Encounter {0} could not be assigned to Individual {1}; batch upload aborted.

# ----------------------------------
# Resources for batch upload emails.
# ----------------------------------
batchUpload.email.errors=The following errors occurred during the batch upload:
batchUpload.email.warnings=The following warnings were generated during the batch upload:

# -------------------------------------
# Resources for batch upload JSP pages.
# -------------------------------------
gui.errors.title=Errors
gui.errors.text=Some problems occurred while processing your data, so the process was aborted. Review the following list, then edit your data accordingly before trying again.
gui.errors.all=See all
gui.errors.thrown=The following critical error occurred:

gui.warnings.title=Warnings
gui.warnings.text=The following (non-critical) issues were found while trying to parse/process your data:


# -----------------------------------------
# Resources for batch upload main JSP page.
# -----------------------------------------
gui.title=Batch Upload
gui.overview=Batch upload helps you to upload large quantities of new data, making it very useful to import large external data sets. It doesn't support modifying existing data, only importing new data. At minimum it imports from two data files, one for individuals, the other for encounters, but it can also import some associated data (measurements, photographs/videos, tissue samples). You are recommended to test the functionality with a small amount of data initially to understand how it operates, and to verify that it performs as expected.<br /><strong>Note:</strong> you must have permission for the region into which you are importing data.

gui.step1.title=Step 1
gui.step1.text=Download the templates using the links below. Data files are in comma-separated variable (CSV) format, and templates have column headers for data items. At minimum you will need to supply data for <span class="dataType">individuals</span> and <span class="dataType">encounters</span>.

gui.step1.template.ind=CSV template for individuals (required)
gui.step1.template.enc=CSV template for encounters (required)
gui.step1.template.mea=CSV template for measurements (optional)
gui.step1.template.med=CSV template for media (optional)
gui.step1.template.sam=CSV template for samples (optional)

gui.step2.title=Step 2
gui.step2.text=Add your data to the templates. This is the biggest step, where you must meet all data requirements below. Examine current website data to ensure you choose appropriate values. Some data are mandatory, and have restrictions on possible values:
gui.step2.text2=CSV files can be output from most spreadsheet applications, but you should ensure date columns are formatted correctly. Also, if your text has any irregular characters (e.g. accented characters) be careful to make sure your spreadsheet outputs correctly in UTF-8 format.<ul><li>LibreOffice Calc supports UTF-8 CSV files.</li><li>OpenOffice Calc supports UTF-8 CSV files.</li><li>Google Spreadsheet supports UTF-8 CSV files <em>(File / Download as / Comma Separated Values)</em>.</li><li>Microsoft Excel does <strong>not</strong> support UTF-8 CSV files.</li></ul>

gui.step2.list0=CSV files should be in UTF-8 text encoding.
gui.step2.list1=Entire data columns may be missing/removed, provided they are not mandatory columns (see below).
gui.step2.list2=Columns headers should not be changed, as they are required to correctly interpret the data.
gui.step2.list3=Mandatory data columns for <span class="dataType">Individual</span>: <span class="colHeader">Individual ID</span>.
gui.step2.list4=Mandatory data columns for <span class="dataType">Encounter</span>: <span class="colHeader">Encounter ID</span>, <span class="colHeader">Date</span>, <span class="colHeader">Sex</span>, <span class="colHeader">Location ID</span>.
gui.step2.list5=Mandatory data columns for <span class="dataType">Measurements</span> (if uploaded): all items.
gui.step2.list6=Mandatory data columns for <span class="dataType">Media</span> (if uploaded): <span class="colHeader">Encounter ID</span> (integer), <span class="colHeader">Media URL</span>.
gui.step2.list7=Mandatory data columns for <span class="dataType">Sample</span> (if uploaded): <span class="colHeader">Encounter ID</span> (integer), <span class="colHeader">Tissue Type</span>, <span class="colHeader">Sample ID</span>.
gui.step2.list8=All dates must be entered in generic format <span class="dateFormat">YYYY-MM-DD</span>; this helps to avoid errors due to regional date styles.<br/><span class="example">(e.g.&nbsp;&quot;2013-02-28&quot; for 28th February 2013)</span>
gui.step2.list9=Times must be entered in <span class="dateFormat">HH:mm</span> format representing local time (for the encounter), using 24-hour clock.<br/><span class="example">(e.g.&nbsp;&quot;15:45&quot;)</span>
gui.step2.list10=<span class="colHeader">Encounter ID</span> is only used to associate interpreted data &amp; will not be seen on the website.
gui.step2.list11=Numerical data should contain the raw number (i.e. no units).
gui.step2.list12=Latitude/longitude must be entered as WGS-84 decimal format.
gui.step2.list13=All entries containing a comma must be quoted <span class="example">(e.g.&nbsp;&quot;Paris, Texas&quot;)</span>.
gui.step2.list14=Entries containing lists of strings must include an initial delimiter character (not used within the strings).<br/><span class="example">(e.g.&nbsp;&quot;|One|Two|Three&quot;)</span>
gui.step2.list15=Dynamic Properties are entered as a list, but use a <span class="dpFormat">key=value</span> format for each entry.<br/><span class="example">(e.g.&nbsp;&quot;|Item1=One|Item2=Two|Item3=Three&quot;)</span>

gui.step2.maxMediaSize=No media file may be larger than {0,number,integer}MB in size.

gui.step2.enums.list0=<span class="dataType">Individual</span> <span class="colHeader">Sex</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list1=<span class="dataType">Encounter</span> <span class="colHeader">Sex</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list2=<span class="dataType">Encounter</span> <span class="colHeader">Genus</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list3=<span class="dataType">Encounter</span> <span class="colHeader">Species</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list4=<span class="dataType">Encounter</span> <span class="colHeader">Location ID</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list5=<span class="dataType">Encounter</span> <span class="colHeader">Living Status</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list6=<span class="dataType">Encounter</span> <span class="colHeader">Life Stage</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list7=<span class="dataType">Encounter</span> <span class="colHeader">Pigmentation</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list8=<span class="dataType">Encounter</span> <span class="colHeader">Researcher Comments</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list9=<span class="dataType">Measurement</span> <span class="colHeader">Type</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list10=<span class="dataType">Measurement</span> <span class="colHeader">Units</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list11=<span class="dataType">Measurement</span> <span class="colHeader">Protocol</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list12=<span class="dataType">Media</span> <span class="colHeader">Keyword</span> data can be any of: <span class="enum">{0}</span>
gui.step2.enums.list13=<span class="dataType">Sample</span> <span class="colHeader">Tissue Type</span> data must be one of: <span class="enum">{0}</span>
gui.step2.enums.list14=<span class="dataType">Sample</span> <span class="colHeader">Preservation Method</span> data must be one of: <span class="enum">{0}</span>

gui.step2.pluginText=MantaMatcher also has a specialized algorithm to analyze the ventral spot patterns of mantas. It uses &quot;candidate region&quot; (CR) photos for this, which are carefully aligned & cropped versions of identification (ID) photos. These are also supported during batch upload in the <span class="dataType">Media</span> data file, and must have a filename exactly as the related ID photo, but with a &quot;_CR&quot; suffix. For example, for an ID photo specified as <span class="fileName">http://myserver.org/batchdata/2013-06-15-Manta1.jpg</span>, the CR photo must be called <span class="fileName">http://myserver.org/batchdata/2013-06-15-Manta1_CR.jpg</span>.

gui.step3.title=Step 3
gui.step3.text=Submit the data files to the server for processing:
gui.step3.text2=Please read the last two steps before clicking the <span class="buttonDesc">Upload</span> button.

gui.step3.form.text.ind=CSV file containing <span class="dataType">individual</span> data (required):
gui.step3.form.text.enc=CSV file containing <span class="dataType">encounter</span> data (required):
gui.step3.form.text.mea=CSV file containing <span class="dataType">measurement</span> data:
gui.step3.form.text.med=CSV file containing <span class="dataType">media</span> data:
gui.step3.form.text.sam=CSV file containing <span class="dataType">sample</span> data:
gui.step3.form.submit=Upload
gui.step3.form.reset=Reset

gui.step4.title=Step 4
gui.step4.text=Once uploaded your data is checked, and if problems are found you will be returned to this page and notified. If accepted, you will continue to a confirmation page.

gui.step5.title=Step 5
gui.step5.text=The confirmation page shows a brief data summary to show what will be imported, and provides an option to continue or abort. You are strongly advised to carefully check the details on the summary page, to ensure they meet your expectations. On continuation you will be taken to a progress summary page; you may remain on this page in your browser to monitor the upload progress. If you're user profile is set to receive automated emails, you will also receive an email once the upload has completed.


# -------------------------------------------------
# Resources for batch upload confirmation JSP page.
# -------------------------------------------------
gui.summary.title=Batch Upload Confirmation

gui.summary.overview=The batch data you submitted has been pre-processed and found to pass the basic data validation/integrity checks. Please examine the summary of your data before proceeding. If you are satisfied, click the confirm button to continue with the data import.

gui.summary.label.ind=Number of individuals:
gui.summary.label.enc=Number of encounters:
gui.summary.label.mea=Number of measurements:
gui.summary.label.med=Number of media items:
gui.summary.label.sam=Number of samples:
gui.summary.value.ind={0,number,integer}
gui.summary.value.enc={0,number,integer} ({1} unassigned to individuals, {2} assigned to existing individuals)
gui.summary.value.mea={0,number,integer}
gui.summary.value.med={0,number,integer}
gui.summary.value.sam={0,number,integer}

gui.summary.text=On clicking the confirm button below the data import will begin. Bear in mind that the downloading/processing of media files is time-consuming, and that data including many media files may take a while to be processed. You will be taken to a progress page which will auto-refresh frequently; you should remain on this page in your browser until the process is completed, to avoid interrupting the process; do not close or alter the respective browser window until the process has completed.

gui.summary.text.confirm=Are you sure you would like to continue?
gui.summary.form.confirm=Confirm
gui.summary.form.cancel=Cancel


# ---------------------------------------------
# Resources for batch upload progress JSP page.
# ---------------------------------------------
gui.progress.title=Batch Upload Progress
gui.progress.status.phase.NONE=STATUS: Waiting for processing to start
gui.progress.status.phase.MEDIA_DOWNLOAD=STATUS: Downloading media items
gui.progress.status.phase.PERSISTENCE=STATUS: Writing data to database
gui.progress.status.phase.THUMBNAILS=STATUS: Generating thumbnail images from media
gui.progress.status.phase.PLUGIN=STATUS: Secondary processing via website plugin
gui.progress.status.phase.DONE=Data import completed
gui.progress.meter.DONE=Finished
gui.progress.problem=Unable to update progress...please wait a little while for progress monitoring to resume.
gui.progress.text.running=Your data is currently being processed, which may take a while to complete. Bear in mind that the downloading/processing of media files is time-consuming, so if you specified a large number then the process will take a while. You may stay on this page to monitor the upload progress. If your user profile is enabled to receive automated emails you should also receive an email notification once the upload has finished.
gui.progress.text.tracker=Completed <span id="percent">{0,number,percent}</span> of the data processing.
gui.progress.text.finished=The batch upload of data has completed successfully, and has been fully integrated into the website. You should now be able to see your data when using the site as usual.
gui.progress.text.error=The batch data processor has encountered errors while trying to process your data.
gui.progress.text.errorIntegrityMediaDownload=Errors occurred while downloading media items specified in batch CSV files. Please check the entries listed below before trying again.
gui.progress.text.errorIntegrityPersistence=Errors occurred while processing data into the database, and it's possible that some entries are now in an inconsistent state. Please check the items listed carefully to ensure the data is correct.
gui.progress.text.errorIntegrityPlugin=Errors occurred while processing media items through the MantaMatcher plugin. Please check the items listed, as they may not have been processed correctly for use with the MantaMatcher algorithm.
gui.progress.text.errorIntegrityThumbnails=Errors occurred while processing thumbnail images for downloaded media items. This is not a critical error, and all data should be stored correctly, but some thumbnail images will need to be recreated.
gui.progress.text.errorIntegrityOk=Please check your input files and try again.
